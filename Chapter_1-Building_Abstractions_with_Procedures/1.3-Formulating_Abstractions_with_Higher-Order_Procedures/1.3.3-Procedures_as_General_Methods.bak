#lang simply-scheme
;;1.3.3 - Procedures as General Methods
;;helper procedures
(define (cube n) (* n n n))
(define (square n) (* n n))
(define (average a b) (/ (+ a b) 2))

;;1.3.3 Procedures as General Methods
;;Finding roots of equations by the half-interval method

; f(a) < 0 < f(b)
(define (search f neg-point pos-point)
  (let ((midpoint (average neg-point pos-point)))
    (if (close-enough? neg-point pos-point)
        midpoint
        (let ((test-value (f midpoint)))
          (cond ((positive? test-value) (search f neg-point midpoint))
                ((negative? test-value) (search f midpoint pos-point))
                (else midpoint))))))

(define (close-enough? x y)
  (< (abs (- x y)) 0.001))

(define (half-interval-method f a b)
  (let ((a-value (f a)) (b-value (f b)))
    (cond ((and (negative? a-value) (positive? b-value)) (search f a b))
          ((and (positive? a-value) (negative? b-value)) (search f b a))
          (else (error "Values are not of opposite sign" a b)))))

;;half interval of x3 - 2x - 3 = 0, between 1 and 2
(half-interval-method
 (lambda (x) (- (* x x x) (* 2 x) 3))
 1.0 2.0)


;;Finding fixed points of functions
; a fixed point is a place which has the property where you put in a value and you get the same value out
; you can find a fixed point by iterating a function, f(f(f(x))), given a first guess, the value
; will eventually be found
(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (newline)
    (display guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

;fixed point of the function y = sin y + cos y, given a 1.0 first guess will reliably give out
;a fixed point of the function: 1.2587315962971173
(fixed-point
 (lambda (y) (+ (sin y) (cos y)))
 1.0)

;;square root y2 = x, y = x/y returns a loop, we fix that loop by applying an averaging of x + f(x)
(define (sqrt x)
  (fixed-point 
   (lambda (y) (average y (/ x y)))
   1.0))

(provide fixed-point)


;;EXERCISES
; Exercise 1.35: Show that the golden ratio φ
; (1.2.2) is a fixed point of the transformation x↦1+1/x , and use this fact to compute φ
; by means of the fixed-point procedure.
(fixed-point
 (lambda (x) (+ 1 (/ 1 x)))
 1.0)
;simply input fixed-point with the transformation and an arbitrary first guess,
;the result will be the golden ratio


;;1.36
;solution of x^x = 1000, by finding fixed point of log(1000)/log(x)
;starting with guess of 2 it takes 34 guesses.
(fixed-point
 (lambda (x) (/ (log 1000) (log x)))
 2)

;starting with guess of 2 and average-damping it takes 9 steps
(fixed-point
 (lambda (x) (average x (/ (log 1000) (log x))))
  2)


;;1.37
;(define (cont-frac-iter n d k)
 ; (define (iter i result)
  ;  (if (= k i)
   ;     result
    ;    (iter (+ i 1) (/ (n i) (+ (n i) (d i))))))
  ;(iter 1 0))

(define (cont-frac-recursive n d k)
  (define (recur i)
    (if (= k i)
        (/ (n i) (d i))
        (/ (n i) (+ (d i) (recur (+ 1 i))))))
  (trace recur)
  (recur 1))

(cont-frac-recursive (lambda (i) 1.0) (lambda (i) 1.0) 5)

(cont-frac-recursive
 (lambda (i) 1.0)
 (lambda (i)
   (if (or (= i 2) ())
 10)































